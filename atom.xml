<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zzzcd0x.github.io</id>
    <title>zzzcd0x &apos;s Blog</title>
    <updated>2020-08-29T07:42:28.503Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zzzcd0x.github.io"/>
    <link rel="self" href="https://zzzcd0x.github.io/atom.xml"/>
    <subtitle>越学越倒退选手</subtitle>
    <logo>https://zzzcd0x.github.io/images/avatar.png</logo>
    <icon>https://zzzcd0x.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, zzzcd0x &apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[网络流解题报告]]></title>
        <id>https://zzzcd0x.github.io/post/wang-luo-liu-jie-ti-bao-gao/</id>
        <link href="https://zzzcd0x.github.io/post/wang-luo-liu-jie-ti-bao-gao/">
        </link>
        <updated>2020-08-28T08:37:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="洛谷p3386-二分图最大匹配问题">洛谷P3386 二分图最大匹配问题</h3>
<p>对于二分图的最大匹配问题可以使用匈牙利算法，更一般的做法是网络流最大流</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.luogu.com.cn/upload/image_hosting/sdjlm6zz.png" alt="" loading="lazy"></figure>
<p>这是一个二分图</p>
<p>也可以这样看这张图</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.luogu.com.cn/upload/image_hosting/id4l9jvm.png" alt="" loading="lazy"></figure>
<p>0号结点可以看作最大流的超级源点，6号结点可以看作超级汇点，因为每个结点最多只能匹配一个结点，所以<strong>每一条边的最大流量只能是1</strong></p>
<p>代码可以这样写</p>
<p><a href="https://www.luogu.com.cn/problem/P3386">题目链接</a></p>
<pre><code class="language-cpp">#include&lt;queue&gt;
#include&lt;cstdio&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 1005;
const int MAXM = 1e5+5;
const int INF = 0x3f3f3f3f;

inline int read() {
    int x = 0;
    char c = getchar();
    while(c &lt; '0' || c &gt; '9')
        c = getchar();
    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {
        x = x*10 + c-'0';
        c = getchar();
    }
    return x;
}

int s, t;
int n, m, e;
int tot = 1;
int d[MAXN];
int head[MAXN];
int to[MAXM&lt;&lt;1];
int val[MAXM&lt;&lt;1];
int nxt[MAXM&lt;&lt;1];
int gap[MAXM&lt;&lt;1];

void add(int x,int y,int z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

void inp() {
    n = read();
    m = read();
    e = read();
    s = n+m+1;
    t = n+m+2;
    for(int i = 1; i &lt;= e; i++) {
        int x = read();
        int y = read();
        add(x,y+n,1);
        add(y+n,x,0);
    }
    for(int i = 1; i &lt;= n; i++) {
        add(s,i,1);
        add(i,s,0);
    }
    for(int i = 1; i &lt;= m; i++) {
        add(i+n,t,1);
        add(t,i+n,0);
    }
}

bool bfs() {
    memset(d,0,sizeof(d));
    queue&lt;int&gt; q;
    q.push(s);
    d[s] = 1;
    gap[s] = head[s];
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        for(int i = head[x]; i ; i = nxt[i]) {
            int y = to[i];
            if(d[y] == 0 &amp;&amp; val[i] &gt; 0) {
                q.push(y);
                d[y] = d[x] + 1;
                gap[y] = head[y];
                if(y == t) return true;
            }
        }
    }
    return false;
}

int dfs(int now,int flow) {
    if(now == t) return flow;
    int k = 0;
    int res = 0;
    for(int i = gap[now]; i ; i = nxt[i]) {
        int y = to[i];
        if(val[i] &gt; 0 &amp;&amp; d[y] == d[now] + 1) {
            k = dfs(y,min(val[i],flow));
            if(!k) d[y] = 0;
            flow -= k;
            res += k;
            val[i] -= k;
            val[i^1] += k; 
        }
    }
    return res;
}

int main() {
    inp();

    int ans = 0;
    while(bfs())
        ans += dfs(s,INF); 

    printf(&quot;%d\n&quot;,ans);

    return 0;
}
</code></pre>
<h3 id="洛谷p2764-最小路径覆盖问题拆点">洛谷P2764 最小路径覆盖问题（拆点）</h3>
<p><a href="https://www.luogu.com.cn/problem/P2764">题目链接</a></p>
<p><strong>给定一个有向图 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo>(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span> ,设 P 是 G 的一个简单路的集合。如果 V 中每个顶点恰好在 P 的一条路上，则称 P 是 G 的一个路径覆盖。</strong></p>
<p>首先将每个点看做一条路径，我们需要让路径尽可能的少，所以就需要合并某些路径，合并完成后，最小路径覆盖数 = 结点数 - 合并的点的数量</p>
<p>求解合并的点的个数时可以将点拆成两个，建图时每一条有向边的终点为拆出来的点，此时该问题就转化为了二分图最大匹配问题，建立一个超级源点连接拆点的结点，再建立一个超级汇点连接拆出来的结点，在图上跑最大流即可。</p>
<pre><code class="language-cpp">#include&lt;queue&gt;
#include&lt;cstdio&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 155;
const int MAXM = 6e3+5;
const int INF = 0x3f3f3f3f;

inline int read() {
    int x = 0;
    char c = getchar();
    while(c &lt; '0' || c &gt; '9') 
        c = getchar();
    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {
        x = x*10 + c-'0';
        c = getchar();
    }
    return x;
}

int n, m;
int s, t;
int tot = 1;
int d[MAXN&lt;&lt;1];
int to[MAXM&lt;&lt;1];
int gap[MAXN&lt;&lt;1];
int nxt[MAXM&lt;&lt;1];
int val[MAXM&lt;&lt;1];
int pre[MAXN&lt;&lt;1];
int head[MAXN&lt;&lt;1];

void add(int x,int y,int z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

void inp() {
    n = read();
    m = read();
    s = n*2+1;
    t = n*2+2;
    for(int i = 1; i &lt;= m; i++) {
        int x = read();
        int y = read();
        add(x,y+n,1);
        add(y+n,x,0);
    }
    for(int i = 1; i &lt;= n; i++) {
        add(s,i,1);
        add(i,s,0);
        add(i+n,t,1);
        add(t,i+n,0);
    }
}

bool bfs() {
    memset(d,0,sizeof(d));
    queue&lt;int&gt; q;
    d[s] = 1;
    gap[s] = head[s];
    q.push(s);
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        for(int i = head[x]; i ; i = nxt[i]) {
            int y = to[i];
            if(d[y] == 0 &amp;&amp; val[i] &gt; 0) {
                q.push(y);
                d[y] = d[x] + 1;
                gap[y] = head[y];
                if(y == t) return true;
            }
        }
    }
    return false;
}

int dfs(int now,int flow) {
    if(now == t) return flow;
    int k = 0;
    int res = 0;
    for(int i = gap[now] ; i &amp;&amp; flow; i = nxt[i]) {
        int y = to[i];
        if(val[i] &gt; 0 &amp;&amp; d[y] == d[now] + 1) {
            k = dfs(y,min(flow,val[i]));
            if(!k) {
                d[y] = 0;
                continue;
            }
            flow -= k;
            res += k;
            val[i] -= k;
            val[i^1] += k;
            pre[now] = y;
        }
    }
    return res;
}

bool vis[MAXN&lt;&lt;1];

void find(int now) {
    printf(&quot;%d &quot;,now);
    vis[now] = true;
    for(int i = head[now]; i ; i = nxt[i]) {
        if(to[i] != t &amp;&amp; to[i] != s)
            if(val[i] == 0 &amp;&amp; val[i^1] == 1)
                if(to[i] &gt; n)
                    find(to[i]-n);
    }
}

int main() {
    inp();

    int ans = 0;
    while(bfs()) {
        ans += dfs(s,INF);
    }
    ans = n-ans;

    for(int i = 1; i &lt;= n; i++)
        if(!vis[i]) {
            find(i);
            puts(&quot;&quot;);
        }

    printf(&quot;%d&quot;,ans);

    return 0;
}
</code></pre>
<h3 id="洛谷p2765-魔术球问题最大流">洛谷P2765 魔术球问题（最大流）</h3>
<p><a href="https://www.luogu.com.cn/problem/P2765">题目链接</a></p>
<p>题目要求的是 这 n 个柱子上最多能放多少个球，将每个柱子看成一个路径，这个问题就可以转化为计算最多 n 条路径最多可以覆盖多少个结点。</p>
<p>具体解法是在枚举每个柱子的时候枚举每一个点，<strong>依次将枚举到的点加入到图中然后去跑最大流，如果求出的最大流等于0则认为当前数量的柱子不能放下这么多球，然后增加柱子数量</strong>。</p>
<p>寻找路径时因为要找出每一个柱子上的结点，所以在搜索时记录好每一个结点的前缀结点，对于每个柱子记录放在上面的第一个结点。</p>
<pre><code class="language-cpp">#include&lt;queue&gt;
#include&lt;cmath&gt;
#include&lt;cstdio&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 1e5+5;

int n;
int s = 1e5+1;
int t = 1e5+2;
int tot = 1;
int d[MAXN];
int to[MAXN];
int pre[MAXN];
int val[MAXN];
int nxt[MAXN];
int top[MAXN];
int gap[MAXN];
bool vis[MAXN];
int head[MAXN];

void add(int x,int y,int z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

bool bfs() {
    memset(d,-1,sizeof(d));
    queue&lt;int&gt; q;
    q.push(s);
    gap[s] = head[s];
    d[s] = 1;
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        for(int i = head[x]; i ; i = nxt[i]) {
            int y = to[i];
            if(d[y] == -1 &amp;&amp; val[i] &gt; 0) {
                q.push(y);
                d[y] = d[x] + 1;
                gap[y] = head[y];
            }
        }
    }
    return d[t] != -1;
}

int dfs(int now,int flow) {
    if(now == t) return flow;
    int k = 0;
    int res = 0;
    for(int i = gap[now]; i &amp;&amp; flow; i = nxt[i]) {
        int y = to[i];
        if(d[y] == d[now] + 1 &amp;&amp; val[i]) {
            k = dfs(y,min(flow,val[i]));
            if(k) {
                flow -= k;
                res += k;
                val[i] -= k;
                val[i^1] += k;
                if(y != t)
                    pre[now&gt;&gt;1] = y&gt;&gt;1;
            }
        }
    }
    return res;
}

int main() {
    scanf(&quot;%d&quot;,&amp;n);

    int now = 0;
    int cnt = 0;
    while(cnt &lt;= n) {
        now++;
        add(s,now&lt;&lt;1,1);
        add(now&lt;&lt;1,s,0);
        add(t,(now&lt;&lt;1)|1,0);
        add((now&lt;&lt;1)|1,t,1);
        for(int i = sqrt(now)+1; i*i &lt; (now&lt;&lt;1); i++) {
            add((i*i-now)&lt;&lt;1,(now&lt;&lt;1)|1,1);
            add((now&lt;&lt;1)|1,(i*i-now)&lt;&lt;1,0);
        }
        int flow = 0;
        while(bfs()) {
            flow += dfs(s,0x3f3f3f3f);
        }
        if(!flow) top[++cnt] = now;
    }

    printf(&quot;%d\n&quot;,now-1);

    for(int i = 1; i &lt;= n; i++) {
        if(vis[top[i]]) continue;
        int x = top[i];
        vis[x] = true;
        while(x) {
            printf(&quot;%d &quot;,x);
            x = pre[x];
            vis[x] = true;
        }
        puts(&quot;&quot;);
    }

    return 0;
}
</code></pre>
<h3 id="洛谷p1231-教辅的组成二分图最大匹配">洛谷P1231 教辅的组成（二分图最大匹配）</h3>
<p><a href="https://www.luogu.com.cn/problem/P1231">题目链接</a></p>
<p>首先对题面进行解析，题目给出书本、练习册、答案的数量，以及可能配套的书本与练习册、书本与答案，要求最多能配成多少套书。</p>
<p>也就是每本书至少要匹配到一本答案和一本练习册才能完成配套。</p>
<p>考虑将结点按照题目要求分为三部分进行建图，建图思路为<strong>源点-&gt;练习册-&gt;书-&gt;答案-&gt;汇点</strong>，然后统计最大流即可。</p>
<p>然后顺手就把图建成了这样。</p>
<figure data-type="image" tabindex="3"><img src="https://cdn.luogu.com.cn/upload/image_hosting/y75t8set.png" alt="" loading="lazy"></figure>
<p>但是这样有一个巨大的问题就是每本书可能会被用到很多次，但他们只能被用一次。</p>
<p>解决这个问题我们可以把每本书拆成两个结点，一个用于连接练习册，另一个用于连接答案，两个结点之间连接一条流量为1的边，这样就可以限制每本书被使用的次数了。</p>
<p>正确的建图方法如下</p>
<figure data-type="image" tabindex="4"><img src="https://cdn.luogu.com.cn/upload/image_hosting/y75t8set.png" alt="" loading="lazy"></figure>
<pre><code class="language-cpp">#include&lt;queue&gt;
#include&lt;cstdio&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 5e4+5;
const int MAXM = 1e5+5;
const int INF = 0x3f3f3f3f;

inline int read() {
    int x = 0;
    char c = getchar();
    while(c &lt; '0' || c &gt; '9')
        c = getchar();
    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {
        x = x*10 + c-'0';
        c = getchar();
    }
    return x;
}

int m1,m2;
int tot = 1;
int s = 0;
int t = 5e4+1;
int n1, n2, n3;
int dis[MAXN];
int gap[MAXN];
int head[MAXN];
int val[MAXM&lt;&lt;1];
int to[MAXM&lt;&lt;1];
int nxt[MAXM&lt;&lt;1];

void add(int x,int y,int z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

bool bfs() {
    memset(dis,0,sizeof(dis));
    queue&lt;int&gt; q;
    q.push(s);
    dis[s] = 1;
    gap[s] = head[s];
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        for(int i = head[x]; i ;i = nxt[i]) {
            int y = to[i];
            if(dis[y] == 0 &amp;&amp; val[i] &gt; 0) {
                dis[y] = dis[x] + 1;
                gap[y] = head[y];
                q.push(y);
            }
        }
    }
    return dis[t] != 0;
}

int dfs(int now,int flow) {
    if(now == t) return flow;
    int k;
    int res = 0;
    for(int i = gap[now]; i &amp;&amp; flow; i = nxt[i]) {
        int y = to[i];
        if(dis[y] == dis[now] + 1 &amp;&amp; val[i] &gt; 0) {
            k = dfs(y,min(val[i],flow));
            if(!k) dis[y] = -1;
            flow -= k;
            res += k;
            val[i] -= k;
            val[i^1] += k;
        }
    }
    return res;
}

void build() {
    n1 = read();
    n2 = read();
    n3 = read();
    m1 = read();
    int n = n1+n2+n3;
    for(int i = 1; i &lt;= m1; i++) {
        int x = read();
        int y = read();
        add(y+n1,x,1);
        add(x,y+n1,0);
    }
    m2 = read();
    for(int i = 1; i &lt;= m2; i++) {
        int x = read();
        int y = read();
        add(x+n,y+n1+n2,1);
        add(y+n1+n2,x+n,0);
    }
    for(int i = 1; i &lt;= n1; i++) {
        add(i,i+n,1);
        add(i+n,i,0);
    }
    for(int i = 1; i &lt;= n2; i++) {
        add(s,i+n1,1);
        add(i+n1,s,0);
    }
    for(int i = 1; i &lt;= n3; i++) {
        add(i+n1+n2,t,1);
        add(t,i+n1+n2,0);
    }
}

int main() {
    build();

    int ans = 0;
    while(bfs()) {
        ans += dfs(s,INF);
    }

    printf(&quot;%d&quot;,ans);

    return 0;
}
</code></pre>
<h3 id="洛谷p2598-狼和羊的故事最小割问题">洛谷P2598 狼和羊的故事（最小割问题）</h3>
<p><a href="https://www.luogu.com.cn/problem/P2598">题目链接</a></p>
<p>这道题刚开始我并没有往最小割的方向考虑，这样充分暴露我对最小割理解的不足。</p>
<p>一开始我以为是最大流，因为每个羊附近最多只能有4只狼，因此从源点开始向每只羊连一条流量为4的边，每只狼向汇点连接一条流量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">INF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> 的边，每只羊与和他相邻的狼连一条流量为1的边，然后很开心的过了样例，交上去反手爆了个零。<img src="https://cdn.luogu.com.cn/upload/pic/62227.png" alt="/kk" loading="lazy"></p>
<p>回想一下割的性质：</p>
<p><strong>割掉一些边后，源点与汇点不再连通</strong>，最小割就是众多割中割掉的边权值和最小的一个，因此源点和割点分别与羊和狼相连的情况下，求出的最小割就是最小篱笆长度。</p>
<p>正确的建模方式是源点与每一只羊连一条流量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">INF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> 的边，汇点与每一只狼连一条流量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>N</mi><mi>F</mi></mrow><annotation encoding="application/x-tex">INF</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> 的边，所有点与四周的结点连一条边。</p>
<p>对于0的归属问题，已经在最大流算法的考虑范围内，所以不用刻意去区分。</p>
<pre><code class="language-cpp">#include&lt;queue&gt;
#include&lt;cstdio&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 1e2+5;
const int MAXM = 1e5+5;
const int INF = 0x3f3f3f3f;

inline int read() {
    int x = 0;
    char c = getchar();
    while(c &lt; '0' || c &gt; '9')
        c = getchar();
    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {
        x = x*10 + c-'0';
        c = getchar();
    }
    return x;
}

int n, m;
int s = 0;
int tot = 1;
int d[MAXM];
int t = 1e5+1;
int gap[MAXM];
int head[MAXM];
int to[MAXM&lt;&lt;1];
int nxt[MAXM&lt;&lt;1];
int val[MAXM&lt;&lt;1];
int Map[MAXN][MAXN];

int kx[4] = {0,0,-1,1};
int ky[4] = {-1,1,0,0};

inline int getnum(int x,int y) {return (x-1)*m+y;}

void add(int x,int y,int z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

void inp() {
    n = read();
    m = read();
    for(int i = 1; i &lt;= n; i++)
        for(int j = 1; j &lt;= m; j++)
            Map[i][j] = read();
    for(int i = 1; i &lt;= n; i++)
        for(int j = 1; j &lt;= m; j++) {
            for(int k = 0; k &lt; 4; k++) {
                int x = i + kx[k];
                int y = j + ky[k];
                if(x &lt; 1 || y &lt; 1 || x &gt; n || y &gt; m) continue;
                    add(getnum(i,j),getnum(x,y),1);
                    add(getnum(x,y),getnum(i,j),0);
                }
            if(Map[i][j] == 1) {
                add(getnum(i,j),t,INF);
                add(t,getnum(i,j),0);
            }
            else if(Map[i][j] == 2) {
                add(s,getnum(i,j),INF);
                add(getnum(i,j),s,0);
            }
        }
}

bool bfs() {
    memset(d,0,sizeof(d));
    queue&lt;int&gt; q;
    d[s] = 1;
    gap[s] = head[s];
    q.push(s);
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        for(int i = head[x]; i ; i = nxt[i]) {
            int y = to[i];
            if(d[y] == 0 &amp;&amp; val[i] &gt; 0) {
                d[y] = d[x] + 1;
                gap[y] = head[y];
                q.push(y);
            }
        }
    }
    return d[t] != 0;
}

int dfs(int now,int flow) {
    if(now == t) return flow;
    int k;
    int res = 0;
    for(int i = gap[now]; i &amp;&amp; flow; i = nxt[i]) {
        gap[now] = i;
        int y = to[i];
        if(d[y] == d[now] + 1 &amp;&amp; val[i] &gt; 0) {
            k = dfs(y,min(flow,val[i]));
            if(!k) d[y] = 0;
            res += k;
            flow -= k;
            val[i] -= k;
            val[i^1] += k;
        }
    }
    return res;
}

int main() {
    inp();

    int ans = 0;
    while(bfs()) {
        ans += dfs(s,INF);
    }
    
    printf(&quot;%d\n&quot;,ans);

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tarjan]]></title>
        <id>https://zzzcd0x.github.io/post/tarjan/</id>
        <link href="https://zzzcd0x.github.io/post/tarjan/">
        </link>
        <updated>2020-08-24T09:01:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="相关定义">相关定义</h2>
<p><strong>强联通</strong>：有向图中，两个顶点之前至少存在一条路径。</p>
<p><strong>强连通图</strong>：每两个顶点都强连通的有向图。</p>
<p><strong>强连通分量</strong>：有向图的极大强连通子图。</p>
<p>这里极大的概念和数学中的极大值类似，最大就是众多极大中最大的一个。</p>
<p><strong>dfs树</strong>：dfs过程中访问到的边构成的树。</p>
<p><strong>树枝边</strong>：在dfs的过程中指向未访问过的结点的边。</p>
<p><strong>前向边</strong>：指向dfs树中子树中的结点的边。</p>
<p><strong>后向边</strong>：指向dfs树中父亲结点的边。</p>
<p><strong>横叉边</strong>：指向dfs树中非子树的边。</p>
<p><strong>时间戳</strong>：根据每个结点被访问的顺序对这些结点进行编号，这些结点的编号就是时间戳。</p>
<p><strong>割点</strong>：在无向连通图中，删掉一个结点以及与他相连的边后，图变为不连通，则该点是一个割点。</p>
<p><strong>割边</strong>：在无向连通图中，删掉一条边后图不再连通，则这条边是一个割边</p>
<h2 id="问题模型">问题模型</h2>
<p>对于一些结点之前存在关系的图，如果是一个DAG可以用拓扑排序求出序列，但如果有环，则每一个环都可以构成一个强连通分量，可以将强连通分量缩成一个结点。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>a</mi><mi>r</mi><mi>j</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Tarjan</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 可以求出图中结点所属的强连通分量，从而可以达到缩点的目的。</p>
<h2 id="四种边的判定">四种边的判定</h2>
<p>首先要引入一个dfs时间戳，用来记录每一个结点第一次被访问的顺序。</p>
<p>对于树枝边，一条边指向的点没有被访问过，则为一条树枝边。</p>
<p>对于前向边，一条边指向的点被访问过，且这条边的终点比始点后被访问，则为一条前向边。</p>
<p>对于后向边，一条边指向的点已经被访问过且不在子树中，且终点在dfs栈中，则为后向边。</p>
<p>对于横叉边，一条边指向的点被访问过且不在子树中且不在dfs栈中，则为横叉边。</p>
<h2 id="tarjan"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>a</mi><mi>r</mi><mi>j</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Tarjan</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span></h2>
<h3 id="强连通分量问题">强连通分量问题</h3>
<p>对于每一个强连通分量中深度最浅的那个点，称他为分割点，所有的分割点可以将dfs树分割为许多棵子树，每一棵子树都是一个强连通分量。</p>
<p>分割的方法是在dfs时维护一个栈来存放路过的结点，离开分割点时将分割点以及分割点之后入栈的结点全部弹出，这些结点即为这一个强连通分量中的结点。</p>
<p>在判断分割点时我们需要维护一个追溯值代码中常为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">low</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span> 数组，一个结点的追溯值表示该结点能到达的子树中时间戳最小的结点。</p>
<p>计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">low[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 时，先令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo>=</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">low[x] = dfn[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dfn[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 为结点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">dfs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span></span></span></span> 序。</p>
<p>对于一条边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></p>
<p>若为树枝边，结点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 能够到达的结点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 也一定能到达，所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">low[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">low[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 更新，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo>[</mo><mi>y</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">low[x] = min(low[x],dfn[y])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 。</p>
<p>若为后向边，此时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 能到达 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>，但 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 一定不能到达 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的父亲结点，所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">low[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi><mo>[</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dfn[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 更新，即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>d</mi><mi>f</mi><mi>n</mi><mo>[</mo><mi>y</mi><mo>]</mo><mo separator="true">,</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">low[x] = min(dfn[y],low[x])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 。</p>
<p>若为前向边，因为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 的信息已经通过树枝边完成传递，所以无需更新。</p>
<p>若为横叉边，指向另一个强连通分量，也无需更新。</p>
<p>当某一个结点的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi><mo>=</mo><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">dfn = low</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span> 时，则该结点是一个分割点。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>a</mi><mi>r</mi><mi>j</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Tarjan</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 部分代码</p>
<pre><code class="language-cpp">void tarjan(int now) {
    dfn[now] = low[now] = ++cnt;
    s[++stop] = now;
    ins[now] = true;
    for(int i = head[now]; i; i = nxt[i]) {
        int y = to[i];
        if(!dfn[y]) {
            tarjan(y);
            low[now] = min(low[y],low[now]);
        }
        else if(ins[y]) {
            low[now] = min(low[now],dfn[y]);
        }
    }
    if(dfn[now] == low[now]) {
        ++num;
        while(s[stop+1] != now) {
            d[s[stop]] = num;
            sum[num] += val[s[stop]];
            ins[s[stop--]] = false;
        }
    }
}
</code></pre>
<h3 id="割点问题">割点问题</h3>
<h4 id="割点判断">割点判断</h4>
<p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 不是搜索树的根节点或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">dfs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span></span></span></span> 的起点，则当且仅当搜索树中存在一条边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>n</mi><mo>[</mo><mi>x</mi><mo>]</mo><mo>≤</mo><mi>l</mi><mi>o</mi><mi>w</mi><mo>[</mo><mi>y</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">dfn[x] \leq low[y]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span></span></span></span> 时， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 为割点。</p>
<h4 id="怎么求呢">怎么求呢</h4>
<p>对于根节点，在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">dfs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span></span></span></span> 的过程中统计子树的个数，如果子树数量大于等于2则为割点。</p>
<p>对于非根节点，根据上面的判断方法进行判断即可</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>a</mi><mi>r</mi><mi>j</mi><mi>a</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">Tarjan</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span></span></span></span> 部分代码</p>
<pre><code class="language-cpp">void tarjan(int now,int fa){
    int chi = 0;
    low[now] = dfn[now] = ++dfscnt;
    for(int i = head[now]; i ; i = edge[i].next)
    {
        int to = edge[i].to;
        if(!dfn[to])
        {
            tarjan(to,fa);
            low[now] = min(low[to],low[now]);
            if(low[to] &gt;= dfn[now] &amp;&amp; now != fa &amp;&amp; !cut[now])
            {
                cut[now] = true;
                sum++;
            }
            if(now == fa)
                chi++;
        }
        else low[now] = min(low[now],dfn[to]);
    }

    if(now == fa &amp;&amp; chi &gt;= 2 &amp;&amp; !cut[now])
    {
        sum++;
        cut[now] = true;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网络流初步]]></title>
        <id>https://zzzcd0x.github.io/post/wang-luo-liu-chu-bu/</id>
        <link href="https://zzzcd0x.github.io/post/wang-luo-liu-chu-bu/">
        </link>
        <updated>2020-08-12T12:59:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="相关定义">相关定义</h2>
<p><strong>网络流图</strong></p>
<p>是一个满足以下条件的 DAG</p>
<ol>
<li>只有一个入度为0的点，称为源点。</li>
<li>只有一个出度为0的点，称为汇点。</li>
<li>每条边都有一个非负权值，称为这条边的容量。</li>
</ol>
<p><strong>容许流</strong></p>
<p>网络流图中，对于每条边<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo>=</mo><mo>(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">e=(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>，给定实数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">f_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,如果满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>e</mi></msub><mo>≤</mo><msub><mi>C</mi><mi>e</mi></msub></mrow><annotation encoding="application/x-tex">f_e \leq C_e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则有以下性质</p>
<p>对于任意 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">≠</mi><mi>S</mi><mo separator="true">,</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">x \neq S,T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mrow><msub><mrow></mrow><mrow><mi>e</mi><mo>=</mo><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>i</mi><mo>)</mo></mrow></msub><msub><mi>f</mi><mi>e</mi></msub></mrow><mo>=</mo><mo>∑</mo><mrow><msub><mrow></mrow><mrow><mi>e</mi><mo>=</mo><mo>(</mo><mi>i</mi><mo separator="true">,</mo><mi>x</mi><mo>)</mo></mrow></msub><msub><mi>f</mi><mi>e</mi></msub></mrow></mrow><annotation encoding="application/x-tex">\sum{_{e=(x,i)}f_e} = \sum{_{e=(i,x)}f_e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mrel mtight">=</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">x</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mrel mtight">=</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mo>=</mo><mo>∑</mo><mrow><mrow><mi>e</mi><mo>=</mo><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>i</mi><mo>)</mo></mrow><msub><mi>f</mi><mi>e</mi></msub></mrow><mo>=</mo><mo>∑</mo><mrow><mrow><mi>e</mi><mo>=</mo><mo>(</mo><mi>i</mi><mo separator="true">,</mo><mi>x</mi><mo>)</mo></mrow><msub><mi>f</mi><mi>e</mi></msub></mrow></mrow><annotation encoding="application/x-tex">W = \sum{{e=(S,i)}f_e} = \sum{{e=(i,x)}f_e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>则这一组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>称为该网络的一个流量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>的容许流。</p>
<p><strong>增广路</strong></p>
<p>从源点开始到达汇点的一条路径中，每一段都满足流量小于容量，设这条路上每一段的容量减流量的值的最小值为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span> 。</p>
<p>将这条路上的每一段的流量加上 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span> 后保证这条路依然可行，则该路径称为这个网络的一条增广路。</p>
<p>简而言之，就是一条从源点到汇点的路径上的各边的剩余容量都大于0的路径。</p>
<p><strong>残量网络</strong></p>
<p>任意时刻，网络流图中所有节点及其剩余容量大于0的边构成的子图。</p>
<p><strong>割</strong></p>
<p>一张图中，去掉图中的几条边后，可以将该图分割为两个不相交的点集，则去掉的这些边称为这张图的一个割。</p>
<p><strong>对于一条有向边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> ，通常称他的反向边为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>V</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{V}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8201099999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˉ</span></span></span></span></span></span></span></span></span> 。</strong></p>
<h2 id="最大流">最大流</h2>
<p>对于一个给定的网络，合法的流函数中使得整个网络的流量最大的一个称为该网络的最大流，此时的流量是该网络的最大流量。</p>
<h3 id="ek算法">EK算法</h3>
<p>EK算法的思想是在网络流图中不断bfs搜索增广路，直到图中不存在增广路。</p>
<p>也可以理解为在网络流图中寻找从S到V边数最短的增广路进行增广，直到无法继续增广。</p>
<p>搜索的过程中只考虑图中流量小于容量的边，bfs找到任意一条增广路，同时计算出路径上各边剩余容量的最小值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">minf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> ，整个网络的流量可以增加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">minf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>。</p>
<p><strong>引理1</strong></p>
<p>令<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">f_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为增广<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>次后得到的一个容许流，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">{\lambda}^{k}(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">f_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>的一条最短路长度，则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo><mo>≤</mo><msup><mi>λ</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo><mi mathvariant="normal">，</mi><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>v</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>≤</mo><msup><mi>λ</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>(</mo><mi>v</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">{\lambda}^{k}(S,v) \leq {\lambda}^{k+1}(S,v)，{\lambda}^{k}(v,T) \leq {\lambda}^{k+1}(v,T)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p>
<p>假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">f_{k+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>中从S到v的最短路为S到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>u</mi><mn>1</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>u</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>u</mi><mi>p</mi></msub><mo>=</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">u_0,u_1...u_{p-1},u_p = v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>。</p>
<p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><mo>(</mo><msub><mi>u</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>u</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">e_i = (u_{i-1},u_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 。</p>
<p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">f_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中可用，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo><mo>≤</mo><msup><mi>λ</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">{\lambda}^{k}(S,v) \leq {\lambda}^{k+1}(S,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> 。</p>
<p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">f_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 中不可用，则他的相反路径一定可用，且在 S 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">u_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 的最短路上，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><msub><mi>u</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>)</mo><mo>=</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><msub><mi>u</mi><mi>i</mi></msub><mo>)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{\lambda}^{k}(S,u_{i-1}) = {\lambda}^k(S,u_i)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 。因为当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 不可用情况下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 必然在之前的增广中被增广过了，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 在从 S 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的最短路上，所以此时 S 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">u_{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 的最短路上一定有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的反向边，否则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 不会不可用。</p>
<p><strong>引理2</strong></p>
<p>设边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">f_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">f_{k+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 的增广路中，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>e</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">e_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的反向路径在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">f_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">f_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 的增广路中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>k</mi><mo>&lt;</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(k&lt;i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> ，则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>i</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>≥</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">{\lambda}^i(S,T) \geq {\lambda}^k(S,T)+2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p>假设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo>=</mo><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">e = (u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>，则</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo><mo>=</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>u</mi><mo>)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">{\lambda}^k(S,v) = {\lambda}^k(S,u)+1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>i</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>=</mo><msup><mi>λ</mi><mi>i</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo><mo>+</mo><mn>1</mn><mo>+</mo><msup><mi>λ</mi><mi>i</mi></msup><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">{\lambda}^i(S,T) = {\lambda}^i(S,v)+1+{\lambda}^i(u,T)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span></span></p>
<p>由引理1得</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>λ</mi><mi>i</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>≥</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo><mo>+</mo><mn>1</mn><mo>+</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>=</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>u</mi><mo>)</mo><mo>+</mo><mn>2</mn><mo>+</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>=</mo><msup><mi>λ</mi><mi>k</mi></msup><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">{\lambda}^i(S,T) \geq {\lambda}^k(S,v)+1+{\lambda}^k(u,T) = {\lambda}^k(S,u)+2+{\lambda}^k(u,T) = {\lambda}^k(S,T)+2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1246639999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">λ</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></span></p>
<p>每条边最多称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n+2}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 次瓶颈，所以最多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>m</mi><mo>(</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo>)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{m(n+2)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 条增广路。</p>
<p>EK算法的时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><msup><mi>m</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nm^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</p>
<h3 id="模板">模板</h3>
<pre><code class="language-cpp">const int INF = 1&lt;&lt;29;
const int MAXN = 1e5+5;

int Max;
int tot = 1;
int n, m, s, t;

bool v[MAXN];
int head[MAXN];
int incf[MAXN];
int to[MAXN&lt;&lt;1];
int pre[MAXN&lt;&lt;1];
int val[MAXN&lt;&lt;1];
int nxt[MAXN&lt;&lt;1];

void add(int x,int y,int z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

bool bfs() {
    memset(v,0,sizeof(v));
    queue&lt;int&gt; q;
    q.push(s);
    v[s] = true;
    incf[s] = INF;
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        for(int i = head[x]; i; i = nxt[i]) {
            if(val[i]) {
                int y = to[i];
                if(v[y]) continue;
                incf[y] = min(incf[x],val[i]);
                pre[y] = i;
                q.push(y);
                v[y] = true;
                if(y == t) return true;
            }
        }
    }
    return false;
}

void upd() {
    int x = t;
    while(x != s) {
        int i = pre[x];
        val[i] -= incf[t];
        val[i^1] += incf[t];	//反向边
        x = to[i^1];
    }
    Max += incf[t];
}

void inp() {
    Max = 0;
    tot = 1;
    scanf(&quot;%d %d %d %d&quot;,&amp;n,&amp;m,&amp;s,&amp;t);
    for(int i = 1; i &lt;= m; i++) {
        int x,y,z;
        scanf(&quot;%d %d %d&quot;,&amp;x,&amp;y,&amp;z);
        add(x,y,z);
        add(y,x,0);
    }
}
</code></pre>
<h3 id="dinic算法">Dinic算法</h3>
<p>EK算法每次搜索可能会遍历整个残量网络但只求出一条增广路，实际上可以一次求出多条满足条件的增广路进行增广。</p>
<p>Dinic算法不断重复一下步骤，直到残量网络中S不能到达T。</p>
<ol>
<li>
<p>在每次增广时，在残量网络上bfs求出每个节点的层次，构造分层图。</p>
</li>
<li>
<p>在分层图中dfs寻找增广路，在回溯时实时更新剩余容量。</p>
</li>
</ol>
<p><strong>当前弧优化</strong></p>
<p>dfs的过程中，维护每一个点可能用于增广的第一条边，每次搜索时舍弃掉不能继续增广的边。</p>
<p>Dinic算法的时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span>。</p>
<h4 id="模板-2">模板</h4>
<pre><code class="language-cpp">typedef long long ll;
const int MAXN = 205;
const int MAXM = 5e3+5;
const ll INF = 0x7f7f7f7f;

int tot = 1;
int n, m, s, t;

ll dis[MAXN];
int gap[MAXN];
int head[MAXN];
int to[MAXM&lt;&lt;1];
ll val[MAXM&lt;&lt;1];
int nxt[MAXM&lt;&lt;1];

void add(int x,int y,ll z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

bool bfs() {
    for(int i = 1; i &lt;= n; i++) dis[i] = INF;
    queue&lt;int&gt; q;
    q.push(s);
    dis[s] = 0;
    gap[s] = head[s];
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        for(int i = head[x]; i ; i = nxt[i]) {
            if(val[i] &gt; 0 &amp;&amp; dis[to[i]] == INF) {
                q.push(to[i]);
                gap[to[i]] = head[to[i]];
                dis[to[i]] = dis[x] + 1;
                if(to[i] == t) return true;
            }
        }
    }
    return false;
}

ll dinic(int now,ll flow) {
    if(now == t) return flow;
    ll k, res = 0;
    for(int i = gap[now] ; i &amp;&amp; flow ; i = nxt[i]) {
        gap[now] = i;
        if(val[i] &gt; 0 &amp;&amp; dis[to[i]] == dis[now] + 1) {
            k = dinic(to[i],min(flow,val[i]));
            if(!k) dis[to[i]] = INF;
            val[i] -= k;
            val[i^1] += k;
            res += k;
            flow -= k;  
        }
    }
    return res;
}

void inp() {
    scanf(&quot;%d %d %d %d&quot;,&amp;n,&amp;m,&amp;s,&amp;t);
    for(int i = 1; i &lt;= m; i++) {
        int x, y;
        ll z;
        scanf(&quot;%d %d %lld&quot;,&amp;x,&amp;y,&amp;z);
        add(x,y,z);
        add(y,x,0);
    }
}
</code></pre>
<h3 id="最大流最小割定理">最大流最小割定理</h3>
<p>设 V 是网络流图的一个结点集，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mi>T</mi><mo>∈</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">S\in V,T\in V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span>，则全部有向边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>i</mi><mi mathvariant="normal">，</mi><mi>j</mi><mo>)</mo><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mi>S</mi><mo separator="true">,</mo><mi>j</mi><mo>∈</mo><mover accent="true"><mi>S</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">(i，j),i\in S,j\in\bar{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8201099999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">ˉ</span></span></span></span></span></span></span></span></span> 的集合称为原网络流图的一个割，记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>V</mi><mo separator="true">,</mo><mover accent="true"><mi>V</mi><mo>ˉ</mo></mover><mo>)</mo></mrow><annotation encoding="application/x-tex">(V,\bar{V})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.07011em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8201099999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">ˉ</span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，集合中所有边的容量之和称为该割的容量。</p>
<p>容量最小的割称为原网络流图的最小割。</p>
<p>一个网络流图的最大流容量 = 最小割容量。</p>
<h2 id="费用流">费用流</h2>
<p>给定一个网络，对于每条边除了有容量限制，还有一个给定的<strong>单位费用</strong>，即假设一条边的单位费用为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> ，则这条边流量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 时，需要花费 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x*y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>  的费用。</p>
<p><strong>费用流问题的前提是最大流</strong>，大多数费用流问题都可以抽象为最小费用最大流或最大费用最小流问题。</p>
<h3 id="ek算法-2">EK算法</h3>
<p>对于EK算法，将每次寻找路径最少的最短路改为寻找费用和最小的最短路即可。</p>
<p>这时要用到单源最短路算法，由于可能出现负权边，因此选择使用SPFA而不是Dijkstra~~（诈尸啦！）~~</p>
<h4 id="模板-3">模板</h4>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;queue&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
typedef long long ll;
const int MAXN = 5e5+5;
const int MAXM = 5e4+5;
const int INF = 0x3f3f3f3f;

int tot = 1;
ll Max_cost;
ll Max_flow;
int n, m, s, t;

bool v[MAXN];
ll dis[MAXN];
ll incf[MAXN];
int head[MAXN];
int to[MAXM&lt;&lt;1];
ll val[MAXM&lt;&lt;1];
int nxt[MAXM&lt;&lt;1];
ll cost[MAXM&lt;&lt;1];
int pre[MAXM&lt;&lt;1];

void add(int x,int y,ll z,ll h) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
    cost[tot] = h;
}

bool bfs() {
    for(int i = 1; i &lt;= n; i++) {
        v[i] = false;
        dis[i] = INF;
    }
    queue&lt;int&gt; q;
    q.push(s);
    v[s] = true;
    dis[s] = 0;
    incf[s] = INF;
    bool jud = false;
    while(!q.empty()) {
        int x = q.front();
        q.pop();
        v[x] = false;
        for(int i = head[x]; i; i = nxt[i]) {
            int y = to[i];
            if(val[i] &amp;&amp; dis[y] &gt; dis[x] + cost[i]) {
                pre[y] = i;
                dis[y] = dis[x] + cost[i];
                incf[y] = min(incf[x],val[i]);
                if(!v[y]) {
                    q.push(y);
                    v[y] = true;
                }
                if(y == t) jud = true;
            }
        }
    }
    return jud;
}

void upd() {
    int x = t;
    while(x != s) {
        int i = pre[x];
        val[i] -= incf[t];
        val[i^1] += incf[t];
        x = to[i^1];
    }
    Max_flow += incf[t];
    Max_cost += incf[t]*dis[t];
}

void inp() {
    Max_flow = 0;
    tot = 1;
    scanf(&quot;%d %d %d %d&quot;,&amp;n,&amp;m,&amp;s,&amp;t);
    for(int i = 1; i &lt;= m; i++) {
        int x,y;
        ll z,h;
        scanf(&quot;%d %d %lld %lld&quot;,&amp;x,&amp;y,&amp;z,&amp;h);
        add(x,y,z,h);
        add(y,x,0,-h);
    }
}

int main() {

    inp();

    while(bfs()) upd();
    printf(&quot;%lld %lld\n&quot;,Max_flow,Max_cost);

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最近公共祖先]]></title>
        <id>https://zzzcd0x.github.io/post/zui-jin-gong-gong-zu-xian/</id>
        <link href="https://zzzcd0x.github.io/post/zui-jin-gong-gong-zu-xian/">
        </link>
        <updated>2020-07-25T07:45:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="树上倍增法">树上倍增法</h2>
<h3 id="怎么计算的">怎么计算的？</h3>
<p>假设要计算树上x和y结点的最近公共祖先，d[x]表示结点x的深度，F[x,k]表示结点x向上跳<code>2</code></p>
<p>设<code>d[x] &gt;= d[y]</code>否则交换x和y</p>
<p>将x结点尝试向上走<code>2^{log(n)}...2^{log(0)}</code>步，检查每次到达的结点是否比y深，若是，则令<code>x=F[x,k]</code>，跳出循环</p>
<p>如果此时<code>x=y</code>则两个结点的LCA就是y</p>
<p>如果不是，则将x和y同时向上调整，保持两者深度相同但不相等，即将两节点同时向上跳<code>2^{log(n)}...2^{log(0)}</code>步，若此时<code>F[x,k]!=F[y,k]</code>(即深度不相等)，则令<code>x=F[x,k],y=F[y,k]</code></p>
<p>循环结束后x和y一定差一步到达同一结点，即他们的最近公共祖先为<code>F[x,0]</code>或<code>F[y,0]</code></p>
<p>单次查询时间复杂度为<code>log(n)</code></p>
<h3 id="例题">例题</h3>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2586">模板题</a></p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 4e4+5;
const int MAXM = 2e2+5;

int tot;
int n, m;
int dis[MAXN];
int dep[MAXN];
int head[MAXN];
bool vis[MAXN];
int to[MAXN&lt;&lt;1];
int fa[MAXN][25];
int nxt[MAXN&lt;&lt;1];
int val[MAXN&lt;&lt;1];

void add(int x,int y,int z) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
}

void dfs(int now,int dad) {
    if(vis[now]) return;
    vis[now] = true;
    fa[now][0] = dad;

    for(int i = head[now]; i ;i = nxt[i]) {
        if(to[i] == dad) continue;
        dis[to[i]] = dis[now] + val[i];
        dep[to[i]] = dep[now] + 1;
        dfs(to[i],now);
    }
}

int lca(int x,int y) {
    if(dep[x] &gt; dep[y])
        swap(x,y);
    
    for(int i = 20; i &gt;= 0; i--)
        if((dep[y] - (1&lt;&lt;i) ) &gt;= dep[x])
            y = fa[y][i];
    
    if(x == y) return x;

    for(int i = 20; i &gt;= 0; i--)
        if(fa[x][i] != fa[y][i]) {
            x = fa[x][i];
            y = fa[y][i];
        }
    return fa[x][0];
}

int t;

void inp() {
    for(int i = 1; i &lt; n; i++) {
        int x, y, z;
        scanf(&quot;%d %d %d&quot;,&amp;x,&amp;y,&amp;z);
        add(x,y,z);
        add(y,x,z);
    }
}

void init() {
    memset(dis,0,sizeof(dis));
    memset(vis,0,sizeof(vis));
    memset(dep,0,sizeof(dep));
    memset(head,0,sizeof(head));
    tot = 0;
}

int main() {

    scanf(&quot;%d&quot;,&amp;t);
    while(t) {
        scanf(&quot;%d %d&quot;,&amp;n,&amp;m);
        init();
        inp();

        dfs(1,1);

        for(int i = 1; i &lt;= 20; i++)
            for(int j = 1; j &lt;= n; j++)
                fa[j][i] = fa[fa[j][i-1]][i-1];

        for(int i = 1; i &lt;= m; i++) {
            int x,y;
            scanf(&quot;%d %d&quot;,&amp;x,&amp;y);
            printf(&quot;%d\n&quot;,dis[x] + dis[y] - 2*dis[lca(x,y)]);
        }
        t--;
    }

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SPFA]]></title>
        <id>https://zzzcd0x.github.io/post/spfa/</id>
        <link href="https://zzzcd0x.github.io/post/spfa/">
        </link>
        <updated>2020-07-22T12:06:46.000Z</updated>
        <content type="html"><![CDATA[<p>虽然spfa算法赛场上会各种被卡，但还是蛮不错的。</p>
<h1 id="大致思想">大致思想</h1>
<ul>
<li>首先将源点加入队列</li>
<li>然后更新源点能够到达的点的最短路</li>
<li>如果被更新的点不在队列中，则加入队列</li>
<li>重复上述2~3步直到队列为空</li>
</ul>
<p>其实思想与dijkstra比较相似，不同的是dijkstra判断点是否进队的依据是该点的最短路有没有被更新过<br>
而spfa的依据是该点在不在队列中</p>
<h1 id="实现">实现</h1>
<p>链式前向星部分已省略</p>
<pre><code class="language-cpp">int d[MAXN];
bool b[MAXN];

void spfa(int s){
    memset(d,0x3f,sizeof(d));
    d[s] = 0;
    b[s] = true;
    q.push(s);
    while(!q.empty())
    {
        int x = q.front();
        q.pop();
        b[x] = false;
        for(int i = head[x]; i ;i = edge[i].next)
        {
            int to = edge[i].to;
            int val = edge[i].val;
            if(d[to] &gt; d[x] + val)
            {
                d[to] = d[x] + val;
                if(!b[to])
                {
                    q.push(to);
                    b[to] = true;
                }
            }
        }
    }
}
</code></pre>
<h2 id="例题">例题</h2>
<h3 id="判断负环">判断负环</h3>
<p><a href="http://poj.org/problem?id=3259">题目链接</a><br>
如果图中出现了负环那么在spfa中负环上的结点会不断的入队，因此只要对入队次数进行计数，如果有一个结点入队次数大于等于总结点数，则图中一定存在负环</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;queue&gt;
#include&lt;stack&gt;
#include&lt;utility&gt;
#include&lt;string.h&gt;
#include&lt;algorithm&gt;
using namespace std;
typedef long long ll;
const int MAXN = 505;
const int MAXM = 3005;

inline int read() {

    int x = 0;
    char c = getchar();
    while(c &lt; '0' || c &gt; '9')
        c = getchar();
    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {
        x = x*10 + c-'0';
        c = getchar();
    }

    return x;
}

int tot;
int n, m, w;
int head[MAXN];
int to[MAXM&lt;&lt;1];
ll val[MAXM&lt;&lt;1];
int nxt[MAXM&lt;&lt;1];
int from[MAXM&lt;&lt;1];

void add(int x,int y,ll z) {

    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    val[tot] = z;
    from[tot] = x;
}

void inp() {

    n = read();
    m = read();
    w = read();
    tot = 0;
    memset(head,0,sizeof(head));
    memset(nxt,0,sizeof(0));

    for(int i = 1; i &lt;= m; i++) {

        int x = read();
        int y = read();
        ll z = read();
        add(x,y,z);
        add(y,x,z);
    } 

    for(int i = 1; i &lt;= w; i++) {

        int x = read();
        int y = read();
        ll z = read();
        add(x,y,-z);
    }
}

ll d[MAXN];
int temp[MAXN];
bool vis[MAXN];

bool spfa() {

    queue&lt;int&gt; q;

    memset(d,0x3f,sizeof(d));
    memset(temp,0,sizeof(temp));
    memset(vis,false,sizeof(vis));

    q.push(1);
    temp[1]++;
    d[1] = 0;
    vis[1] = true;

    while(!q.empty()) {
        int x = q.front();
        vis[x] = false;
        q.pop();
        for(int i = head[x]; i ; i = nxt[i]) {
            if(d[to[i]] &gt; d[x] + val[i]) {
                d[to[i]] = d[x] + val[i];
                temp[to[i]]++;
                if(temp[to[i]] &gt;= n)
                    return true;
                if(!vis[to[i]]) {
                    q.push(to[i]);
                    vis[to[i]] = true;
                }
            }
        }   
    }
    return false;
}

int main() {

    int t = read();

    while(t) {

        inp();

        if(spfa())
            puts(&quot;YES&quot;);
        else puts(&quot;NO&quot;);

        t--;
    }

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[并查集]]></title>
        <id>https://zzzcd0x.github.io/post/bing-cha-ji-dsu/</id>
        <link href="https://zzzcd0x.github.io/post/bing-cha-ji-dsu/">
        </link>
        <updated>2020-07-17T02:29:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="什么是并查集">什么是并查集</h2>
<p>并查集是一种比较简洁但功能强大的数据结构，主要用于维护一些不相关集合。</p>
<p>支持合并两个集合、查找一个结点属于哪一个集合两种操作。</p>
<h3 id="初始化">初始化</h3>
<p>在开始使用并查集之前认为每一个点都代表一个独立的集合</p>
<pre><code class="language-cpp">for(int i = 1; i &lt;= n; i++) 
	dad[i] = i;
</code></pre>
<h3 id="查询操作">查询操作</h3>
<p>将关联两个结点的关系看作图中的边，则查询操作就是不断查找一个结点的父结点，直至找到根节点，即代表该集合的结点。</p>
<h4 id="朴素写法">朴素写法</h4>
<pre><code class="language-cpp">int anc(int p) {
    if(dad[p] == p) return p;
    else return anc(dad[p]);
}
</code></pre>
<p>这样查找在整个关系构成一条链时时间复杂度会达到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>因此诞生了路径压缩优化</p>
<h4 id="路径压缩">路径压缩</h4>
<p>在递归找到根节点后，回溯的过程中将子节点的父亲结点设为找到的根节点，这样就可以避免路径的重复访问</p>
<pre><code class="language-cpp">int anc(int p) {
    if(dad[p] == p) return p;
    else return dad[p] = anc(p);
}
</code></pre>
<p>这样单次查找的时间复杂度就变成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 了，总时间复杂度均摊 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 。</p>
<h3 id="合并操作">合并操作</h3>
<p>并查集中用一个数组用于储存每个集合中的代表元素，因此在合并两个集合时只要将这两个集合的代表元素合并到同一个集合中即可。</p>
<pre><code class="language-cpp">void uni(int x,int y) {
    x = anc(x);
    y = anc(y);
    if(x != y)
        dad[x] = y;
}
</code></pre>
<h3 id="种类并查集">种类并查集</h3>
<p>在某些情况下会出现类似<strong>敌人的敌人是朋友</strong>的状态需要维护，这种情况下就需要使用种类并查集进行维护</p>
<p>种类并查集需要开两倍大小的空间用于维护状态（有的时候不止两倍），其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1-n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 用于维护朋友关系，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>−</mo><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">n+1-2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span> 用于维护敌人关系。</p>
<p>这样在合并操作时，同一个结点的敌人就会被合并到同一个集合里。</p>
<p>与前面的并查集不同的是，假设要设定 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 为敌人关系，则合并 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">y+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">x+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 所在集合。</p>
<h3 id="例题">例题</h3>
<p><strong>并查集常规操作</strong></p>
<p><a href="https://www.luogu.com.cn/record/32631894">题目链接</a></p>
<p>并查集裸题，直接打模板即可</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
using namespace std;

int n, m, p;
int dad[5005];

int anc(int x){
	if(dad[x] == x) return x;
    return dad[x] = anc(dad[x]);
}

void uni(int x, int y){

    x = anc(x);
    y = anc(y);
    
    if(x != y)
        dad[x] = y;
}

bool ask(int x,int y)
{
    return anc(x) == anc(y);
}

void inp(){

    int x, y;
    scanf(&quot;%d %d %d&quot;,&amp;n,&amp;m,&amp;p);
    for(int i = 1; i &lt;= m; i++)
    {
        scanf(&quot;%d%d&quot;,&amp;x,&amp;y);
        uni(x,y);
    }
}

void getans(){

    int x, y;
    for(int i = 1; i &lt;= p; i++)
    {
        scanf(&quot;%d %d&quot;,&amp;x,&amp;y);
        if(ask(x,y))
            printf(&quot;Yes\n&quot;);
        else
            printf(&quot;No\n&quot;);
    }
}

int main()
{
    inp();

    getans();

    return 0;
}
</code></pre>
<p><strong>种类并查集</strong></p>
<p><a href="https://www.luogu.com.cn/problem/P1525">题目链接</a></p>
<p>本题要求冲突值尽可能小，则先对所有关系进行从大到小排序，优先合并冲突值大的关系，则第一次出现冲突是即为冲突值的最小值</p>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int MAXN = 2e4+5;
const int MAXM = 1e5+5;

struct Node{
    int x;
    int y;
    int num;
}node[MAXM];

inline int read() {
    int x = 0;
    char c = getchar();
    while(c &lt; '0' || c &gt; '9')
        c = getchar();
    while(c &gt;= '0' &amp;&amp; c &lt;= '9') {
        x = x*10 + c-'0';
        c = getchar();
    }
    return x;
}

int ans;
int n, m;
int dad[MAXN&lt;&lt;1];

int anc(int p) {
    if(dad[p] == p) return p;
    return dad[p] = anc(dad[p]);
}

void uni(int x,int y) { dad[anc(x)] = anc(y);}

bool jud(Node&amp; x,Node&amp; y) {return x.num &gt; y.num;}

int main() {
    n = read();
    m = read();

    for(int i = 1; i &lt;= n; i++) {
        dad[i] = i;
        dad[i+n] = i+n;
    }

    for(int i = 0; i &lt; m; i++) {
        node[i].x = read();
        node[i].y = read();
        node[i].num = read();
    }
    sort(node,node+m,jud);

    for(int i = 0; i &lt; m; i++) {
        if(anc(node[i].x) == anc(node[i].y)) {
            ans = node[i].num;
            break;
        }
        uni(node[i].x,node[i].y+n);
        uni(node[i].x+n,node[i].y);
    }

    printf(&quot;%d\n&quot;,ans);

    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gcd lcm]]></title>
        <id>https://zzzcd0x.github.io/post/gcd-lcm/</id>
        <link href="https://zzzcd0x.github.io/post/gcd-lcm/">
        </link>
        <updated>2020-07-14T08:33:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="最大公因数gcd">最大公因数(gcd)</h2>
<h3 id="性质">性质：</h3>
<ol>
<li>gcd(1,n) = 1</li>
<li>设d = gcd(a,b) 则 gcd(a/d,b/d) = 1</li>
<li>gcd(a,b) = gcd(a+-b,b) = gcd(a,b+-a)</li>
</ol>
<h3 id="辗转相除法求解">辗转相除法求解：</h3>
<p>由gcd(a,b) = gcd(a-b,b) 得 gcd(a,b) = gcd(a%b,b)</p>
<p>因此求解过程可写为：</p>
<ol>
<li>如果a&lt;b,则交换a,b</li>
<li>如果b = 0，则返回a</li>
<li>令a = a%b</li>
</ol>
<p>重复上述过程</p>
<pre><code class="language-cpp">int gcd(int a, int b) {
    if (a &lt; b) {
        int t = b;
        b = a;
        a = t;
    }
    if (b == 0) return a;
    return gcd(a % b, b);
}
</code></pre>
<h2 id="最小公倍数lcm">最小公倍数(lcm)</h2>
<pre><code class="language-math">lcm(a,b) = {ab\over gcd(a,b)}
</code></pre>
<p><s>怎么求就不用说了吧</s></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[素数筛]]></title>
        <id>https://zzzcd0x.github.io/post/su-shu-shai/</id>
        <link href="https://zzzcd0x.github.io/post/su-shu-shai/">
        </link>
        <updated>2020-07-14T08:32:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="埃氏筛">埃氏筛</h1>
<ul>
<li>
<h2 id="主要过程">主要过程</h2>
</li>
<li>
<p>从2到n枚举，如果该数字没有标记(是素数)</p>
</li>
<li>
<p>枚举范围内的该数字的倍数，将枚举到的数字标记为素数<br>
这样枚举结束后所有的合数就被打了标记，没打标记的就是素数</p>
</li>
</ul>
<h2 id="实现">实现</h2>
<p>以找100以内的素数为例</p>
<pre><code class="language-cpp">int n = 100;
bool flag[105];

void sieve(){
    for(int i = 2; i &lt;= n; i++)
            if(!flag[i])
            {
                printf(&quot;%d &quot;,i);
                for(int j = 2; i*j &lt;= n; j++)
                    flag[i*j] = true;
            }
}
</code></pre>
<p>时间复杂度：<code>O(n\log(\log(n)))</code></p>
<h1 id="欧拉筛">欧拉筛</h1>
<p>埃氏筛中有一部分数被筛了不止一次，例如6被2筛完又被3筛<br>
然而一个合数被标记只需要被其最小素因子筛就好了<br>
这样的筛法就是欧拉筛，也叫线性筛</p>
<ul>
<li>
<h2 id="过程">过程</h2>
</li>
<li>
<p>i从2开始枚举，在枚举的过程中，记录当前已知的素数</p>
</li>
<li>
<p>枚举的每一步都去筛当前已知的所有的素数的i倍</p>
</li>
<li>
<p><strong>当i能被枚举到的素数整除即已经筛到了当前情况下将要被筛的数的最小素因子则跳出循环</strong>应该被筛却没有被筛的数会在i更大的情况下被筛掉</p>
</li>
</ul>
<h2 id="实现-2">实现</h2>
<p>以找100以内的素数为例</p>
<pre><code class="language-cpp">int cnt;
int n = 100;
int prime[100];
bool flag[100];

void sieve(){

    for(int i = 2; i &lt;= n; i++)
        {
            if(!flag[i])
            {
                prime[++cnt] = i;
                printf(&quot;%d &quot;,i);
            }
            for(int j = 1; prime[j] * i &lt;= n &amp;&amp; j &lt;= cnt; j++)
            {
                flag[prime[j]*i] = true;
                if(i % prime[j] == 0) break;
            }
        }   
}
</code></pre>
<p>时间复杂度：<code>O(n)</code><br>
适合处理数据范围巨大的情况</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[链式前向星]]></title>
        <id>https://zzzcd0x.github.io/post/lian-shi-qian-xiang-xing/</id>
        <link href="https://zzzcd0x.github.io/post/lian-shi-qian-xiang-xing/">
        </link>
        <updated>2020-07-14T08:32:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="原理">原理</h1>
<pre><code>链式前向星与邻接表类似，用一个数组存储了一个点可以到达的所有的点，区别是链式前向星使用链表将从每一个点出发的每一条边用链表的形式链在了一起，对边的存储方式是存储指向的顶点，边权，以及一下一条边的编号
</code></pre>
<h1 id="怎么写呢">怎么写呢</h1>
<ul>
<li>结构体写法</li>
</ul>
<pre><code class="language-cpp">struct Edge{
    int to;
    int val;
    int nxt;
    int from; 
}edge[10005];
int head[10005];                //每一个点的链表的头结点编号
int tot = 0;                    //用于存储每一个点的头结点

void add(int x,int y,int z){
    edge[++tot].nxt = head[x];
    head[x] = tot;
    edge[tot].to = y;
    edge[tot].from = x;
    edge[tot].val = z;
}
</code></pre>
<ul>
<li>数组写法</li>
</ul>
<pre><code class="language-cpp">int tot;
int to[MAXN];
int from[MAXN];
int head[MAXN];
int val[MAXN];

void add(int x,int y) {
    nxt[++tot] = head[x];
    head[x] = tot;
    to[tot] = y;
    from[tot] = x;
}
</code></pre>
<h1 id="遍历">遍历</h1>
<pre><code>与每一个点相连的边已经以链表的形式存储，头结点存储在head数组中，因此我们可以使用类似遍历链表的方式遍历与每一个点相连的每一条边
</code></pre>
<pre><code class="language-cpp">void search(){

    for(int i = 1; i &lt;= n; i++)
        for(int j = head[i]; j ; j = edge[j].next)
            printf(&quot;%d %d %d\n&quot;,edge[j].to,edge[j].val,edge[j].next);

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[拓扑排序]]></title>
        <id>https://zzzcd0x.github.io/post/tuo-bu-pai-xu/</id>
        <link href="https://zzzcd0x.github.io/post/tuo-bu-pai-xu/">
        </link>
        <updated>2020-07-14T08:31:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是dag">什么是DAG</h1>
<pre><code>通俗来说DAG就是有向无环图的简称，通过名字就可以看出，DAG的基本特点是边为有向边，且图内无环
</code></pre>
<p>这个图虽然看似有环，但因为边都是有向边，所以并没有构成环。<br>
观察一下上面那个图，不难发现以每一个结点为起点都可以找到对应的一条链，因此许多图论问题都可以抽象为找DAG中的最短链或者最长链。<br>
然而在一些图论问题中结点之间存在先后关系，这样就不能直接用平常的遍历方式来对图进行遍历，而是需要先对结点按照先后顺序进行排序，转化为一个序列后再进行遍历</p>
<h1 id="拓扑排序">拓扑排序</h1>
<pre><code>上述过程应用的排序算法就是拓扑排序，排序后整张图就被转化成了一个序列，然后通过这个序列来解决问题
</code></pre>
<h2 id="过程">过程</h2>
<ol>
<li>在存图是记录每个结点的入度和出度</li>
<li>存图结束后将入度为0的点加入序列</li>
<li>那处序列头部的点x，遍历该点可以到达的所有点y</li>
<li>删掉x到y的边，即y点的入度减一</li>
<li>如果y点入度为0则加入序列</li>
<li>重复2~5直至序列为空</li>
</ol>
<pre><code class="language-cpp">struct edge{
    int to;
    int val;
    int next;
}e[10005];

int n, m;
int ind[10005];    //入度
int head[100005];

queue&lt;int&gt;q;

void topsort(){

    for(int i = 1; i &lt;= n; i++)                   //将入度为0的结点放入序列
        if(!ind[i])
            q.push(i);

    while(!q.empty())
    {
        int x = q.front();
        q.pop();

        for(int i = head[x]; i; i = e[i].next)    //遍历x能到达的点
        {
            int y = e[i].to;
            ind[y]--;                             //删边
            if(!ind[y])                               //如果y点入度为0则放入序列
            	q.push(y);
        }
    }
}
</code></pre>
]]></content>
    </entry>
</feed>